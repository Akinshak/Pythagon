
#Write a function that can print out a board
#Set up your board as a list where each index 1-9 corresponds with a number on a number pad,so you get a 3 by 3 board representation
from IPython.display import clear_output

def display_board(board):
	clear_output()
	print('   |   |')
	print(' ' + board[7]+'|'+board[8]+'|'+board[9]+'|')
	print('   |   |')
	print('-----------')
	print(board[4]+'|'+board[5]+'|'+board[6]+'|')
	print('   |   |')
	print('-----------')
	print(board[1]+'|'+board[2]+'|'+board[3]+'|')
	print('   |   |')

#Run the function on a test version of the board list, and make adjustments a s necessary
test_board = ['#','X','O','X','O','X','O','X','O','X']
display_board(test_board)
display_board(test_board)

#Write a function that takes in Input of 'X' or 'O'
def player_input():

#OUTPUT = (Player 1 marker, Player 2 marker)

	marker = ''
	while marker <> 'X' and marker <> 'O':
		marker = input('Player1: Choose X or O: ').upper()

	if marker == 'X':
		return('X','O')
	else:
		return('O','X')

#Run the function to make sure it returns the desired Output

player1_marker, player2_marker = player_input() 

#Write a function that takes in the board list object, a marker('X'or 'O'),and a desired position(Number 1-9) and assigns it to the board

def place_marker(board, marker, position):
	board[position] = marker

#Run the place Marker function using test parameters and display the Modified board
test_board

#Write a function that takes in a board and a mark(X or O)and checks to see if the mark has won
def win_check(board,mark):
	#WIN TIC TAC TOE

	#ALL ROWS, AND CHECK TO SEE IF THEY ALL SHARE THE SAME MARKER
	(board[1] ==  board[2] == board[3] == mark) or
	(board[4] ==  board[5] == board[6] == mark) or
	(board[7] ==  board[8] == board[9] == mark) 
	#ALL COLUMNS, CHECK TO SEE IF MARKER MATCHES
	(board[1] ==  board[4] == board[7] == mark) or
	(board[2] ==  board[5] == board[8] == mark) or
	(board[3] ==  board[6] == board[9] == mark) 
	#2 Diagonals, check to see match
	(board[1] ==  board[5] == board[9] == mark) or
	(board[3] ==  board[5] == board[7] == mark)

#Run the win_check function against our test_board - it should return True

display_board(test_board)
win_check(test_board,'X')

#Write a function that uses the random module to randomly decide  which player goes first

import random
def choose_first():
	flip  = random.randint(0,1)
	if flip == 0:
		return 'Player1'
	else:
		return'Player2'

#Write a function that returns a boolean indicating whether a space on the board is freely available
def space_check(board,position):
	return board[position] == ' '

#Write a function that checks if the board is full and returbs a boolean Value
def full_board_check(board):
	for i in range(1,10):
		if space_check(board,i):
			return False

	return True
#Write a function that asks a player's next position

def player_choice(board):
	position = 0
	while position not in [1,2,3,4,5,6,7,8,9] or not space_check(board,position):
		position = int(input('Choose a position: (1-9) '))

	return position

#Write a function that asks a player if they want to play again
 
def replay():
	choice = input("Play again? Enter Yes or No")

	return choice == 'Yes'

#Use While loops and functions to run the Game
print('Welcome to TIC TAC TOE')

while True:

	the_board = [' ']*10
	player1_marker,player2_marker = player_input()
	turn = choose_first()
	print(turn + ' will go first')

	play_game = input('Ready to play? Yes or No')
	
	if play_game == 'Yes':
		game_on == True
	elif play_game == 'No':
		game_on == False
	else:
		print('Please Enter a Valid Input!')


	while game_on:
		if turn == 'Player1':
			display_board(the_board)

			position = player_choice(the_board)

			place_marker(the_board,player1_marker)

			if win_check(the_board,player1_marker):
				display_board(the_board)
				print('Player 1 Has won')
				game_on = False

			else:
				if full_board_check(the_board):
					display_board(the_board)
					print('Tie Game!')
					game_on = False
				else:
					turn = 'Player 2' 
		else:
			display_board(the_board)

			position = player_choice(the_board)

			place_marker(the_board,player2_marker)

			if win_check(the_board,player2_marker):
				display_board(the_board)
				print('Player 2 Has won')
				game_on = False

			else:
				if full_board_check(the_board):
					display_board(the_board)
					print('Tie Game!')
					game_on = False
				else:
					turn = 'Player 1' 


	
 
